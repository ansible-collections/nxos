---
- debug: msg="START common/backup.yaml on connection={{ ansible_connection }}"

- set_fact: intname="{{ nxos_int1 }}"

- name: setup
  cisco.nxos.nxos_config:
    commands:
      - no description
      - no shutdown
    parents:
      - interface {{ intname }}
    match: none

- name: collect any backup files
  find: &id001
    paths: '{{ role_path }}/backup'
    pattern: '{{ inventory_hostname_short }}_config*'
  connection: local
  register: backup_files

- name: delete backup files
  file:
    path: '{{ item.path }}'
    state: absent
  with_items: '{{backup_files.files|default([])}}'

- name: configure device with config
  register: result
  cisco.nxos.nxos_config:
    commands:
      - description this is a test
      - shutdown
    parents:
      - interface {{ intname }}
    backup: true

- assert:
    that:
      - result.changed == true
      - result.updates is defined

- name: collect any backup files
  find: *id001
  connection: local
  register: backup_files

- assert:
    that:
      - backup_files.files is defined

- name: delete configurable backup file path
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ role_path }}/backup_test_dir/'
    - '{{ role_path }}/backup/backup.cfg'

- set_fact:
    backup_custom_dir: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'

- name: take configuration backup in custom filename and directory path
  register: result
  cisco.nxos.nxos_config:
    backup: true
    backup_options:
      filename: backup.cfg
      dir_path: "{{ backup_custom_dir }}"

- assert:
    that:
      - result.changed == true

- name: check if the backup file-1 exist
  find:
    paths: "{{ backup_custom_dir }}"
    pattern: "backup.cfg"
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- set_fact:
    non_cfg_1: "{{ lookup('file', '{{ backup_custom_dir }}/backup.cfg') | regex_search('!Command:.+') }}"
    non_cfg_2: "{{ lookup('file', '{{ backup_custom_dir }}/backup.cfg') | regex_search('!Time:.+') }}"
    non_cfg_3: "{{ lookup('file', '{{ backup_custom_dir }}/backup.cfg') | regex_search('!Running configuration last done at:.+') }}"

- name: Assert that backup file has no non-config data
  assert:
    that:
      - non_cfg_1 == ''
      - non_cfg_2 == ''
      - non_cfg_3 == ''

- name: take configuration backup in custom filename
  register: result
  cisco.nxos.nxos_config:
    backup: true
    backup_options:
      filename: backup.cfg

- assert:
    that:
      - result.changed == true

- name: check if the backup file-2 exist
  find:
    paths: '{{ role_path }}/backup'
    pattern: 'backup.cfg'
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- name: take configuration backup in custom path and default filename
  register: result
  cisco.nxos.nxos_config:
    backup: true
    backup_options:
      dir_path: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'

- assert:
    that:
      - result.changed == true

- name: check if the backup file-3 exist
  find:
    paths: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'
    pattern: '{{ inventory_hostname_short }}_config*'
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- debug: msg="END common/backup.yaml on connection={{ ansible_connection }}"
